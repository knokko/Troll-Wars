#defaultversion

in vec2 passTextureCoords;
in vec3 toCameraVector;
in vec3 passRefLightDirection;
in float passBrightness;

out vec4 out_Color;

uniform sampler2D textureSampler;
uniform float shineDamper;
uniform float reflectivity;

void main(void){
	vec3 unitCameraVector = normalize(toCameraVector);
	float specularFactor = dot(passRefLightDirection,unitCameraVector);
	float dampedFactor = pow(specularFactor,shineDamper);
	float specular = dampedFactor * reflectivity;
	vec4 textureColor = texture(textureSampler,passTextureCoords);
	if(textureColor.a < 0.5)
		discard;
	out_Color = vec4(passBrightness,passBrightness,passBrightness,1.0) * textureColor + vec4(specular,specular,specular,1.0);
}